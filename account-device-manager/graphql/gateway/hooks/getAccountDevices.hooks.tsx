/* istanbul ignore file */
/* AUTO-GENERATED, DO NOT EDIT THIS FILE */
/* eslint-disable */
/* @ts-nocheck */
import * as Types from '../generated/schema-types';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
const defaultOptions = {} as const;
export type GetAccountDevicesQueryVariables = Types.Exact<{
  accountId: Types.Scalars['ID']['input'];
}>;


export type GetAccountDevicesQuery = { __typename?: 'Query', account?: { __typename?: 'Account', devices: Array<{ __typename?: 'Device', id: string, name: string, link?: string | null }> } | null };


export const GetAccountDevicesDocument = gql`
    query GetAccountDevices($accountId: ID!) {
  account(id: $accountId) {
    devices {
      id
      name
      link
    }
  }
}
    `;

/**
 * __useGetAccountDevicesQuery__
 *
 * To run a query within a React component, call `useGetAccountDevicesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetAccountDevicesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetAccountDevicesQuery({
 *   variables: {
 *      accountId: // value for 'accountId'
 *   },
 * });
 */
export function useGetAccountDevicesQuery(baseOptions: Apollo.QueryHookOptions<GetAccountDevicesQuery, GetAccountDevicesQueryVariables> & ({ variables: GetAccountDevicesQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<GetAccountDevicesQuery, GetAccountDevicesQueryVariables>(GetAccountDevicesDocument, options);
      }
export function useGetAccountDevicesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetAccountDevicesQuery, GetAccountDevicesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<GetAccountDevicesQuery, GetAccountDevicesQueryVariables>(GetAccountDevicesDocument, options);
        }
export function useGetAccountDevicesSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<GetAccountDevicesQuery, GetAccountDevicesQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<GetAccountDevicesQuery, GetAccountDevicesQueryVariables>(GetAccountDevicesDocument, options);
        }
export type GetAccountDevicesQueryHookResult = ReturnType<typeof useGetAccountDevicesQuery>;
export type GetAccountDevicesLazyQueryHookResult = ReturnType<typeof useGetAccountDevicesLazyQuery>;
export type GetAccountDevicesSuspenseQueryHookResult = ReturnType<typeof useGetAccountDevicesSuspenseQuery>;
export type GetAccountDevicesQueryResult = Apollo.QueryResult<GetAccountDevicesQuery, GetAccountDevicesQueryVariables>;